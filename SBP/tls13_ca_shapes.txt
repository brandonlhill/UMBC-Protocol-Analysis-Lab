(comment "CPSA 4.4.2")
(comment "Extracted shapes")

(herald "Cookie Authentication with TLS 1.3" (bound 12))

(comment "CPSA 4.4.2")

(comment "All input read from tls13_ca.scm")

(comment "Strand count bounded at 12")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (any mesg) (cookie data) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (spk akey) (u s ca name)
    (pt pt-0 pval) (cookiestor locn) (x rndx) (y expt))
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor) (x x) (y y))
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cr sr)
  (uniq-gen x)
  (traces
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))))
  (label 0)
  (unrealized (0 1))
  (origs (pt-0 (0 6)) (cr (0 0)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request httpreq) (p password) (cr sr random32) (spk akey)
    (u s ca name) (pt pt-0 pt-1 pt-2 pval) (cookiestor authstor locn)
    (y x rndx))
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor) (x x) (y y))
  (defstrand servera 9 (any any-0) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (authstor authstor) (y y) (x x))
  (precedes ((0 0) (1 0)) ((0 2) (1 2)) ((0 3) (1 3)) ((0 7) (1 7))
    ((1 1) (0 1)) ((1 4) (0 4)) ((1 8) (0 8)))
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cookie cr sr)
  (uniq-gen y x)
  (absent (y x))
  (facts (neq u s))
  (rule fact-servera-neq0 trRl_clienta-at-5 trRl_clienta-at-6
    trRl_servera-at-5 trRl_servera-at-6)
  (operation encryption-test (displaced 2 0 clienta 8)
    (enc cookie request-0
      (hash "c ap traffic" cr sr
        (hash (exp (gen) (mul x-0 y)) "derived"))) (1 7))
  (traces
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    ((recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat pt-1 any-0))
      (stor authstor (cat pt-2 "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))))
  (label 37)
  (parent 0)
  (realized)
  (shape)
  (maps
    ((0)
      ((u u) (s s) (ca ca) (p p) (cr cr) (sr sr) (spk spk) (x x) (y y)
        (cookie cookie) (any any) (cookiestor cookiestor)
        (request request) (response response))))
  (origs (pt-0 (0 6)) (cookie (1 4)) (pt-2 (1 6)) (cr (0 0))
    (sr (1 1))))

(comment "Nothing left to do")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (any mesg) (cookie data) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (spk akey) (u s ca name)
    (pt pt-0 pval) (cookiestor locn) (x rndx) (y expt))
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor) (x x) (y y))
  (deflistener cookie)
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cr sr)
  (uniq-gen x)
  (traces
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    ((recv cookie) (send cookie)))
  (label 63)
  (unrealized (0 1))
  (origs (pt-0 (0 6)) (cr (0 0)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request request-0 httpreq) (p password) (cr sr cr-0 sr-0 random32)
    (spk spk-0 akey) (ca u s ca-0 name) (pt pt-0 pt-1 pt-2 pval)
    (cookiestor authstor locn) (x rndx) (y expt) (y-0 x-0 rndx))
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk-0) (u u) (s s)
    (ca ca-0) (cookiestor cookiestor) (x x-0) (y y-0))
  (deflistener cookie)
  (defstrand clientr 5 (cookie cookie) (request request-0) (cr cr-0)
    (sr sr-0) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor)
    (x x) (y y))
  (defstrand servera 9 (any any-0) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk-0) (u u) (s s)
    (ca ca-0) (authstor authstor) (y y-0) (x x-0))
  (precedes ((0 0) (3 0)) ((0 2) (3 2)) ((0 3) (3 3)) ((0 6) (2 3))
    ((0 7) (3 7)) ((2 4) (1 0)) ((3 1) (0 1)) ((3 4) (0 4))
    ((3 8) (0 8)))
  (non-orig (invk spk-0) (privk ca-0))
  (pen-non-orig p)
  (uniq-orig cookie cr sr)
  (uniq-gen x y-0 x-0)
  (absent (y-0 x-0))
  (gen-st (cat "client store" u s cookie))
  (facts (neq u s))
  (leads-to ((0 6) (2 3)))
  (rule fact-servera-neq0 trRl_clienta-at-5 trRl_clienta-at-6
    trRl_servera-at-5 trRl_servera-at-6)
  (operation encryption-test (displaced 4 0 clienta 8)
    (enc cookie request-1
      (hash "c ap traffic" cr sr
        (hash (exp (gen) (mul x-1 y-0)) "derived"))) (3 7))
  (traces
    ((send (cat cr (exp (gen) x-0)))
      (recv
        (cat (cat sr (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0)))
            (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0))))
          (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived")))))
    ((recv cookie) (send cookie))
    ((send (cat cr-0 (exp (gen) x)))
      (recv
        (cat (cat sr-0 (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y)) s
                spk (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))
              (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
                  s spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr-0 sr-0))
            (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y)) s
                spk (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))
              (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
                  s spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr-0 sr-0)))
      (load cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request-0
          (hash "c ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul x y)) "derived")))))
    ((recv (cat cr (exp (gen) x-0)))
      (send
        (cat (cat sr (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0)))
            (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0))))
          (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (load authstor (cat pt-1 any-0))
      (stor authstor (cat pt-2 "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))))
  (label 142)
  (parent 63)
  (realized)
  (shape)
  (maps
    ((0 1)
      ((u u) (s s) (ca ca-0) (p p) (cr cr) (sr sr) (spk spk-0)
        (cookie cookie) (x x-0) (y y-0) (any any)
        (cookiestor cookiestor) (request request) (response response))))
  (origs (pt-0 (0 6)) (cookie (3 4)) (pt-2 (3 6)) (cr (0 0))
    (sr (3 1))))

(comment "Nothing left to do")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (cookie data) (response httpdata) (request httpreq)
    (cr sr random32) (spk akey) (s ca u name) (pt pval)
    (cookiestor locn) (x rndx) (y expt))
  (defstrand clientr 6 (cookie cookie) (response response)
    (request request) (cr cr) (sr sr) (spk spk) (u u) (s s) (ca ca)
    (cookiestor cookiestor) (x x) (y y))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cr sr)
  (uniq-gen x)
  (traces
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat pt "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))))
  (label 296)
  (unrealized (0 1))
  (origs (cr (0 0)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request httpreq) (p p-0 password)
    (cr sr cr-0 sr-0 cr-1 sr-1 random32) (spk spk-0 spk-1 akey)
    (u ca u-0 s ca-0 ca-1 name) (pt pt-0 pt-1 pt-2 pval)
    (cookiestor authstor locn) (x rndx) (y expt) (y-0 x-0 y-1 rndx)
    (x-1 expt))
  (defstrand clientr 6 (cookie cookie) (response response)
    (request request) (cr cr) (sr sr) (spk spk-0) (u u) (s s) (ca ca-0)
    (cookiestor cookiestor) (x x-0) (y y-0))
  (defstrand clienta 7 (any any) (cookie cookie) (p p) (cr cr-0)
    (sr sr-0) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor)
    (x x) (y y))
  (defstrand serverr 6 (cookie cookie) (response response)
    (request request) (cr cr) (sr sr) (spk spk-0) (u u-0) (s s)
    (ca ca-0) (authstor authstor) (y y-0) (x x-0))
  (defstrand servera 7 (any any-0) (cookie cookie) (p p-0) (cr cr-1)
    (sr sr-1) (spk spk-1) (u u-0) (s s) (ca ca-1) (authstor authstor)
    (y y-1) (x x-1))
  (precedes ((0 0) (2 0)) ((0 2) (2 2)) ((0 4) (2 3)) ((1 6) (0 3))
    ((2 1) (0 1)) ((2 5) (0 5)) ((3 4) (1 4)) ((3 6) (2 4)))
  (non-orig (invk spk-0) (privk ca-0))
  (uniq-orig cookie cr sr)
  (uniq-gen x y-0 x-0 y-1)
  (absent (y-0 x-0) (y-1 x-1))
  (gen-st (cat "client store" u s cookie)
    (cat "server store" s u-0 cookie))
  (facts (neq u-0 s))
  (leads-to ((1 6) (0 3)) ((3 6) (2 4)))
  (rule fact-serverr-neq0 trRl_clienta-at-5 trRl_clienta-at-6
    trRl_servera-at-5 trRl_servera-at-6)
  (operation channel-test (added-strand servera 7)
    (ch-msg authstor (cat pt-1 "server store" s u-0 cookie)) (2 4))
  (traces
    ((send (cat cr (exp (gen) x-0)))
      (recv
        (cat (cat sr (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0)))
            (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0))))
          (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr)))
      (load cookiestor (cat pt "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived")))))
    ((send (cat cr-0 (exp (gen) x)))
      (recv
        (cat (cat sr-0 (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y)) s
                spk (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))
              (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
                  s spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr-0 sr-0))
            (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y)) s
                spk (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))
              (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
                  s spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr-0 sr-0)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor (cat pt-0 any))
      (stor cookiestor (cat pt "client store" u s cookie)))
    ((recv (cat cr (exp (gen) x-0)))
      (send
        (cat (cat sr (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0)))
            (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0))))
          (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (load authstor (cat pt-1 "server store" s u-0 cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived")))))
    ((recv (cat cr-1 (exp (gen) x-1)))
      (send
        (cat (cat sr-1 (exp (gen) y-1))
          (enc (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
            (enc
              (hash (cat cr-1 (exp (gen) x-1))
                (cat sr-1 (exp (gen) y-1)) s spk-1
                (enc (hash s spk-1) (privk ca-1))) (invk spk-1))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-1 x-1)) "s hs traffic" cr-1
                  sr-1)) (cat cr-1 (exp (gen) x-1))
              (cat sr-1 (exp (gen) y-1))
              (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
              (enc
                (hash (cat cr-1 (exp (gen) x-1))
                  (cat sr-1 (exp (gen) y-1)) s spk-1
                  (enc (hash s spk-1) (privk ca-1))) (invk spk-1)))
            (hash (exp (gen) (mul y-1 x-1)) "s hs traffic" cr-1 sr-1))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-1 x-1)) "c hs traffic" cr-1 sr-1))
            (cat cr-1 (exp (gen) x-1)) (cat sr-1 (exp (gen) y-1))
            (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
            (enc
              (hash (cat cr-1 (exp (gen) x-1))
                (cat sr-1 (exp (gen) y-1)) s spk-1
                (enc (hash s spk-1) (privk ca-1))) (invk spk-1))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-1 x-1)) "s hs traffic" cr-1
                  sr-1)) (cat cr-1 (exp (gen) x-1))
              (cat sr-1 (exp (gen) y-1))
              (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
              (enc
                (hash (cat cr-1 (exp (gen) x-1))
                  (cat sr-1 (exp (gen) y-1)) s spk-1
                  (enc (hash s spk-1) (privk ca-1))) (invk spk-1))))
          (hash (exp (gen) (mul y-1 x-1)) "c hs traffic" cr-1 sr-1)))
      (recv
        (enc "login" u-0 p-0
          (hash "c ap traffic" cr-1 sr-1
            (hash (exp (gen) (mul y-1 x-1)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr-1 sr-1
            (hash (exp (gen) (mul y-1 x-1)) "derived"))))
      (load authstor (cat pt-2 any-0))
      (stor authstor (cat pt-1 "server store" s u-0 cookie))))
  (label 334)
  (parent 296)
  (realized)
  (shape)
  (maps
    ((0)
      ((s s) (ca ca-0) (cr cr) (sr sr) (spk spk-0) (u u) (x x-0) (y y-0)
        (cookie cookie) (cookiestor cookiestor) (request request)
        (response response))))
  (origs (cookie (3 4)) (pt-1 (3 6)) (pt (1 6)) (cr (0 0)) (sr (2 1))))

(comment "Nothing left to do")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (any mesg) (cookie data) (request httpreq) (p password)
    (cr sr random32) (spk akey) (s ca u name) (pt pt-0 pval)
    (authstor locn) (y rndx) (x expt))
  (defstrand servera 8 (any any) (cookie cookie) (request request) (p p)
    (cr cr) (sr sr) (spk spk) (u u) (s s) (ca ca) (authstor authstor)
    (y y) (x x))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cookie sr)
  (uniq-gen y)
  (absent (y x))
  (traces
    ((recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat pt any))
      (stor authstor (cat pt-0 "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))))
  (label 367)
  (realized)
  (origs (pt-0 (0 6)) (sr (0 1)) (cookie (0 4)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any mesg) (cookie data) (request httpreq) (p password)
    (cr sr random32) (spk akey) (s ca u name) (pt pt-0 pval)
    (authstor locn) (y rndx) (x expt))
  (defstrand servera 8 (any any) (cookie cookie) (request request) (p p)
    (cr cr) (sr sr) (spk spk) (u u) (s s) (ca ca) (authstor authstor)
    (y y) (x x))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cookie sr)
  (uniq-gen y)
  (absent (y x))
  (facts (neq u s))
  (rule fact-servera-neq0 trRl_servera-at-5 trRl_servera-at-6)
  (traces
    ((recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat pt any))
      (stor authstor (cat pt-0 "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))))
  (label 368)
  (parent 367)
  (realized)
  (shape)
  (maps
    ((0)
      ((s s) (ca ca) (cr cr) (sr sr) (spk spk) (cookie cookie) (u u)
        (y y) (x x) (p p) (any any) (authstor authstor)
        (request request))))
  (origs (pt-0 (0 6)) (sr (0 1)) (cookie (0 4))))

(comment "Nothing left to do")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (cookie data) (request httpreq) (cr sr random32) (spk akey)
    (s ca u name) (pt pval) (authstor locn) (y rndx) (x expt))
  (defstrand serverr 5 (cookie cookie) (request request) (cr cr) (sr sr)
    (spk spk) (u u) (s s) (ca ca) (authstor authstor) (y y) (x x))
  (non-orig (invk spk) (privk ca))
  (uniq-orig sr)
  (uniq-gen y)
  (absent (y x))
  (traces
    ((recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat pt "server store" s u cookie))))
  (label 369)
  (realized)
  (origs (sr (0 1)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any mesg) (cookie data) (request httpreq) (p password)
    (cr sr cr-0 sr-0 random32) (spk spk-0 akey) (s ca u ca-0 name)
    (pt pt-0 pval) (authstor locn) (y rndx) (x expt) (y-0 rndx)
    (x-0 expt))
  (defstrand serverr 5 (cookie cookie) (request request) (cr cr) (sr sr)
    (spk spk) (u u) (s s) (ca ca) (authstor authstor) (y y) (x x))
  (defstrand servera 7 (any any) (cookie cookie) (p p) (cr cr-0)
    (sr sr-0) (spk spk-0) (u u) (s s) (ca ca-0) (authstor authstor)
    (y y-0) (x x-0))
  (precedes ((1 4) (0 3)) ((1 6) (0 4)))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cookie sr)
  (uniq-gen y y-0)
  (absent (y x) (y-0 x-0))
  (gen-st (cat "server store" s u cookie))
  (facts (neq u s))
  (leads-to ((1 6) (0 4)))
  (rule fact-serverr-neq0 trRl_servera-at-5 trRl_servera-at-6)
  (operation channel-test (added-strand servera 7)
    (ch-msg authstor (cat pt "server store" s u cookie)) (0 4))
  (traces
    ((recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat pt "server store" s u cookie)))
    ((recv (cat cr-0 (exp (gen) x-0)))
      (send
        (cat (cat sr-0 (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr-0 (exp (gen) x-0))
                (cat sr-0 (exp (gen) y-0)) s spk-0
                (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr-0
                  sr-0)) (cat cr-0 (exp (gen) x-0))
              (cat sr-0 (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr-0 (exp (gen) x-0))
                  (cat sr-0 (exp (gen) y-0)) s spk-0
                  (enc (hash s spk-0) (privk ca-0))) (invk spk-0)))
            (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr-0 sr-0))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr-0 sr-0))
            (cat cr-0 (exp (gen) x-0)) (cat sr-0 (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr-0 (exp (gen) x-0))
                (cat sr-0 (exp (gen) y-0)) s spk-0
                (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr-0
                  sr-0)) (cat cr-0 (exp (gen) x-0))
              (cat sr-0 (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr-0 (exp (gen) x-0))
                  (cat sr-0 (exp (gen) y-0)) s spk-0
                  (enc (hash s spk-0) (privk ca-0))) (invk spk-0))))
          (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr-0 sr-0)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (load authstor (cat pt-0 any))
      (stor authstor (cat pt "server store" s u cookie))))
  (label 371)
  (parent 369)
  (realized)
  (shape)
  (maps
    ((0)
      ((s s) (ca ca) (cr cr) (sr sr) (spk spk) (cookie cookie) (u u)
        (y y) (x x) (authstor authstor) (request request))))
  (origs (cookie (1 4)) (pt (1 6)) (sr (0 1))))

(comment "Nothing left to do")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (any mesg) (cookie data) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (spk akey) (u s ca name)
    (pt pt-0 pval) (cookiestor locn) (x rndx) (y expt))
  (deflistener cookie)
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor) (x x) (y y))
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cr sr)
  (uniq-gen x)
  (goals
    (forall
      ((any mesg) (cookie data) (response httpdata) (request httpreq)
        (p password) (cr sr random32) (spk akey) (x rndx) (u s ca name)
        (cookiestor locn) (z z-0 strd))
      (implies
        (and (p "clienta" z 9) (p "" z-0 2) (p "clienta" "any" z any)
          (p "clienta" "cookie" z cookie)
          (p "clienta" "response" z response) (p "clienta" "spk" z spk)
          (p "clienta" "request" z request) (p "clienta" "p" z p)
          (p "clienta" "cr" z cr) (p "clienta" "sr" z sr)
          (p "clienta" "x" z x) (p "clienta" "u" z u)
          (p "clienta" "s" z s) (p "clienta" "ca" z ca)
          (p "clienta" "cookiestor" z cookiestor) (p "" "x" z-0 cookie)
          (non (invk spk)) (non (privk ca)) (pnon p) (uniq sr)
          (uniq-at cr z 0) (ugen-at x z 0)) (false))))
  (traces ((recv cookie) (send cookie))
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))))
  (label 372)
  (unrealized (1 1))
  (origs (pt-0 (1 6)) (cr (1 0)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request request-0 httpreq) (p password) (cr sr cr-0 sr-0 random32)
    (spk spk-0 akey) (u s ca ca-0 name) (pt pt-0 pt-1 pt-2 pval)
    (cookiestor authstor locn) (y x x-0 rndx) (y-0 expt))
  (deflistener cookie)
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor) (x x) (y y))
  (defstrand servera 9 (any any-0) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (authstor authstor) (y y) (x x))
  (defstrand clientr 5 (cookie cookie) (request request-0) (cr cr-0)
    (sr sr-0) (spk spk-0) (u u) (s s) (ca ca-0) (cookiestor cookiestor)
    (x x-0) (y y-0))
  (precedes ((1 0) (2 0)) ((1 2) (2 2)) ((1 3) (2 3)) ((1 6) (3 3))
    ((1 7) (2 7)) ((2 1) (1 1)) ((2 4) (1 4)) ((2 8) (1 8))
    ((3 4) (0 0)))
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cookie cr sr)
  (uniq-gen y x x-0)
  (absent (y x))
  (gen-st (cat "client store" u s cookie))
  (facts (neq u s))
  (leads-to ((1 6) (3 3)))
  (rule fact-servera-neq0 gen-st-clientr-0 trRl_clienta-at-5
    trRl_clienta-at-6 trRl_servera-at-5 trRl_servera-at-6)
  (operation nonce-test (added-strand clientr 5) cookie (0 0)
    (enc "login-successful" cookie
      (hash "s ap traffic" cr sr
        (hash (exp (gen) (mul y x)) "derived")))
    (ch-msg cookiestor (cat pt-0 "client store" u s cookie)))
  (traces ((recv cookie) (send cookie))
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    ((recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat pt-1 any-0))
      (stor authstor (cat pt-2 "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    ((send (cat cr-0 (exp (gen) x-0)))
      (recv
        (cat (cat sr-0 (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr-0 (exp (gen) x-0))
                (cat sr-0 (exp (gen) y-0)) s spk-0
                (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x-0 y-0)) "s hs traffic" cr-0
                  sr-0)) (cat cr-0 (exp (gen) x-0))
              (cat sr-0 (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr-0 (exp (gen) x-0))
                  (cat sr-0 (exp (gen) y-0)) s spk-0
                  (enc (hash s spk-0) (privk ca-0))) (invk spk-0)))
            (hash (exp (gen) (mul x-0 y-0)) "s hs traffic" cr-0 sr-0))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x-0 y-0)) "c hs traffic" cr-0 sr-0))
            (cat cr-0 (exp (gen) x-0)) (cat sr-0 (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr-0 (exp (gen) x-0))
                (cat sr-0 (exp (gen) y-0)) s spk-0
                (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x-0 y-0)) "s hs traffic" cr-0
                  sr-0)) (cat cr-0 (exp (gen) x-0))
              (cat sr-0 (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr-0 (exp (gen) x-0))
                  (cat sr-0 (exp (gen) y-0)) s spk-0
                  (enc (hash s spk-0) (privk ca-0))) (invk spk-0))))
          (hash (exp (gen) (mul x-0 y-0)) "c hs traffic" cr-0 sr-0)))
      (load cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request-0
          (hash "c ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul x-0 y-0)) "derived"))))))
  (label 431)
  (parent 372)
  (realized)
  (shape)
  (satisfies
    (no (fact false) (any any) (cookie cookie) (response response)
      (request request) (p p) (cr cr) (sr sr) (spk spk) (x x) (u u)
      (s s) (ca ca) (cookiestor cookiestor) (z 1) (z-0 0)))
  (maps
    ((0 1)
      ((any any) (cookie cookie) (response response) (request request)
        (p p) (cr cr) (sr sr) (spk spk) (x x) (u u) (s s) (ca ca)
        (cookiestor cookiestor) (y y))))
  (origs (pt-0 (1 6)) (cookie (2 4)) (pt-2 (2 6)) (sr (2 1))
    (cr (1 0))))

(comment "Nothing left to do")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (any mesg) (cookie data) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (spk akey) (u s ca name)
    (pt pt-0 pval) (cookiestor locn) (x rndx) (y expt))
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor) (x x) (y y))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cr sr)
  (uniq-gen x)
  (goals
    (forall
      ((z strd) (cookie data) (u s ca name) (cr sr random32) (spk akey)
        (x rndx))
      (implies
        (and (p "clienta" z 9) (p "clienta" "cookie" z cookie)
          (p "clienta" "u" z u) (p "clienta" "s" z s)
          (p "clienta" "spk" z spk) (p "clienta" "ca" z ca)
          (p "clienta" "cr" z cr) (p "clienta" "sr" z sr)
          (p "clienta" "x" z x) (non (privk ca)) (non (invk spk))
          (uniq sr) (uniq-at cr z 0) (ugen-at x z 0))
        (exists ((z0 strd))
          (and (p "servera" z0 9) (p "servera" "cookie" z0 cookie)
            (p "servera" "u" z0 u) (p "servera" "s" z0 s)
            (uniq-at cookie z0 4) (fact neq u s))))))
  (traces
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))))
  (label 533)
  (unrealized (0 1))
  (origs (pt-0 (0 6)) (cr (0 0)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request httpreq) (p password) (cr sr random32) (spk akey)
    (u s ca name) (pt pt-0 pt-1 pt-2 pval) (cookiestor authstor locn)
    (y x rndx))
  (defstrand clienta 9 (any any) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor) (x x) (y y))
  (defstrand servera 9 (any any-0) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (spk spk) (u u) (s s)
    (ca ca) (authstor authstor) (y y) (x x))
  (precedes ((0 0) (1 0)) ((0 2) (1 2)) ((0 3) (1 3)) ((0 7) (1 7))
    ((1 1) (0 1)) ((1 4) (0 4)) ((1 8) (0 8)))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cookie cr sr)
  (uniq-gen y x)
  (absent (y x))
  (facts (neq u s))
  (rule fact-servera-neq0 trRl_clienta-at-5 trRl_clienta-at-6
    trRl_servera-at-5 trRl_servera-at-6)
  (operation encryption-test (displaced 2 0 clienta 8)
    (enc cookie request-0
      (hash "c ap traffic" cr sr
        (hash (exp (gen) (mul x-0 y)) "derived"))) (1 7))
  (traces
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    ((recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat pt-1 any-0))
      (stor authstor (cat pt-2 "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))))
  (label 570)
  (parent 533)
  (realized)
  (shape)
  (satisfies yes)
  (maps
    ((0)
      ((cookie cookie) (u u) (s s) (ca ca) (cr cr) (sr sr) (spk spk)
        (x x) (y y) (p p) (any any) (cookiestor cookiestor)
        (request request) (response response))))
  (origs (pt-0 (0 6)) (cookie (1 4)) (pt-2 (1 6)) (sr (1 1))
    (cr (0 0))))

(comment "Nothing left to do")

(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (p password) (cookie data) (any mesg) (cookiestor locn)
      (request httpreq) (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor any)
      (stor cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (x rndx) (y expt) (spk akey)
      (cookie data) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived")))))
    (uniq-gen x)
    (gen-st (cat "client store" u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (p password) (cookie data) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc "login" u p
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor any)
      (stor authstor (cat "server store" s u cookie))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-orig cookie)
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (y rndx) (x expt) (spk akey)
      (cookie data) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv (cat cr (exp (gen) x)))
      (send
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y x)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y x)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul y x)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived"))))
      (load authstor (cat "server store" s u cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y x)) "derived")))))
    (uniq-gen y)
    (absent (y x))
    (facts (neq u s))
    (gen-st (cat "server store" s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "servera" z (idx 4)) (p "servera" "s" z s)
          (p "servera" "u" z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "s" z s)
          (p "serverr" "u" z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_clienta-at-5
    (forall ((z strd))
      (implies (p "clienta" z (idx 7)) (trans z (idx 5)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-5
    (forall ((z strd))
      (implies (p "servera" z (idx 7)) (trans z (idx 5)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie data) (s u name))
      (implies
        (and (p "clientr" z (idx 4)) (p "clientr" "cookie" z cookie)
          (p "clientr" "s" z s) (p "clientr" "u" z u))
        (gen-st (cat "client store" u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p "serverr" z (idx 5)) (p "serverr" "cookie" z cookie)
          (p "serverr" "u" z u) (p "serverr" "s" z s))
        (gen-st (cat "server store" s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))

(defskeleton ca
  (vars (cookie data) (response httpdata) (request httpreq)
    (cr sr random32) (spk akey) (u s ca name) (pt pval)
    (cookiestor locn) (x rndx) (y expt))
  (defstrand clientr 6 (cookie cookie) (response response)
    (request request) (cr cr) (sr sr) (spk spk) (u u) (s s) (ca ca)
    (cookiestor cookiestor) (x x) (y y))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cr sr)
  (uniq-gen x)
  (goals
    (forall
      ((z strd) (cookie data) (u s ca name) (cr sr random32) (spk akey)
        (x rndx))
      (implies
        (and (p "clientr" z 6) (p "clientr" "cookie" z cookie)
          (p "clientr" "u" z u) (p "clientr" "s" z s)
          (p "clientr" "spk" z spk) (p "clientr" "ca" z ca)
          (p "clientr" "cr" z cr) (p "clientr" "sr" z sr)
          (p "clientr" "x" z x) (non (privk ca)) (non (invk spk))
          (uniq sr) (uniq-at cr z 0) (ugen-at x z 0))
        (exists ((z0 strd))
          (and (p "servera" z0 7) (p "servera" "cookie" z0 cookie)
            (p "servera" "u" z0 u) (p "servera" "s" z0 s)
            (uniq-at cookie z0 4) (fact neq u s))))))
  (traces
    ((send (cat cr (exp (gen) x)))
      (recv
        (cat (cat sr (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s spk
                (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x)) (cat sr (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr (exp (gen) x)) (cat sr (exp (gen) y)) s
                  spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr sr)))
      (load cookiestor (cat pt "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul x y)) "derived"))))))
  (label 596)
  (unrealized (0 1))
  (origs (cr (0 0)))
  (comment "Not closed under rules"))

(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request httpreq) (p p-0 password)
    (cr sr cr-0 sr-0 cr-1 sr-1 random32) (spk spk-0 spk-1 akey)
    (u ca u-0 s ca-0 ca-1 name) (pt pt-0 pt-1 pt-2 pval)
    (cookiestor authstor locn) (x rndx) (y expt) (y-0 x-0 y-1 rndx)
    (x-1 expt))
  (defstrand clientr 6 (cookie cookie) (response response)
    (request request) (cr cr) (sr sr) (spk spk-0) (u u) (s s) (ca ca-0)
    (cookiestor cookiestor) (x x-0) (y y-0))
  (defstrand clienta 7 (any any) (cookie cookie) (p p) (cr cr-0)
    (sr sr-0) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor)
    (x x) (y y))
  (defstrand serverr 6 (cookie cookie) (response response)
    (request request) (cr cr) (sr sr) (spk spk-0) (u u-0) (s s)
    (ca ca-0) (authstor authstor) (y y-0) (x x-0))
  (defstrand servera 7 (any any-0) (cookie cookie) (p p-0) (cr cr-1)
    (sr sr-1) (spk spk-1) (u u-0) (s s) (ca ca-1) (authstor authstor)
    (y y-1) (x x-1))
  (precedes ((0 0) (2 0)) ((0 2) (2 2)) ((0 4) (2 3)) ((1 6) (0 3))
    ((2 1) (0 1)) ((2 5) (0 5)) ((3 4) (1 4)) ((3 6) (2 4)))
  (non-orig (invk spk-0) (privk ca-0))
  (uniq-orig cookie cr sr)
  (uniq-gen x y-0 x-0 y-1)
  (absent (y-0 x-0) (y-1 x-1))
  (gen-st (cat "client store" u s cookie)
    (cat "server store" s u-0 cookie))
  (facts (neq u-0 s))
  (leads-to ((1 6) (0 3)) ((3 6) (2 4)))
  (rule fact-serverr-neq0 trRl_clienta-at-5 trRl_clienta-at-6
    trRl_servera-at-5 trRl_servera-at-6)
  (operation channel-test (added-strand servera 7)
    (ch-msg authstor (cat pt-1 "server store" s u-0 cookie)) (2 4))
  (traces
    ((send (cat cr (exp (gen) x-0)))
      (recv
        (cat (cat sr (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0)))
            (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0))))
          (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr)))
      (load cookiestor (cat pt "client store" u s cookie))
      (send
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (recv
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived")))))
    ((send (cat cr-0 (exp (gen) x)))
      (recv
        (cat (cat sr-0 (exp (gen) y))
          (enc (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y)) s
                spk (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))
              (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
                  s spk (enc (hash s spk) (privk ca))) (invk spk)))
            (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))))
      (send
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul x y)) "c hs traffic" cr-0 sr-0))
            (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
            (cat s spk (enc (hash s spk) (privk ca)))
            (enc
              (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y)) s
                spk (enc (hash s spk) (privk ca))) (invk spk))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul x y)) "s hs traffic" cr-0 sr-0))
              (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
              (cat s spk (enc (hash s spk) (privk ca)))
              (enc
                (hash (cat cr-0 (exp (gen) x)) (cat sr-0 (exp (gen) y))
                  s spk (enc (hash s spk) (privk ca))) (invk spk))))
          (hash (exp (gen) (mul x y)) "c hs traffic" cr-0 sr-0)))
      (send
        (enc "login" u p
          (hash "c ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul x y)) "derived"))))
      (recv
        (enc "login-successful" cookie
          (hash "s ap traffic" cr-0 sr-0
            (hash (exp (gen) (mul x y)) "derived"))))
      (load cookiestor (cat pt-0 any))
      (stor cookiestor (cat pt "client store" u s cookie)))
    ((recv (cat cr (exp (gen) x-0)))
      (send
        (cat (cat sr (exp (gen) y-0))
          (enc (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0)))
            (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr))
            (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
            (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
            (enc
              (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0)) s
                spk-0 (enc (hash s spk-0) (privk ca-0))) (invk spk-0))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-0 x-0)) "s hs traffic" cr sr))
              (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
              (cat s spk-0 (enc (hash s spk-0) (privk ca-0)))
              (enc
                (hash (cat cr (exp (gen) x-0)) (cat sr (exp (gen) y-0))
                  s spk-0 (enc (hash s spk-0) (privk ca-0)))
                (invk spk-0))))
          (hash (exp (gen) (mul y-0 x-0)) "c hs traffic" cr sr)))
      (recv
        (enc cookie request
          (hash "c ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived"))))
      (load authstor (cat pt-1 "server store" s u-0 cookie))
      (send
        (enc response
          (hash "s ap traffic" cr sr
            (hash (exp (gen) (mul y-0 x-0)) "derived")))))
    ((recv (cat cr-1 (exp (gen) x-1)))
      (send
        (cat (cat sr-1 (exp (gen) y-1))
          (enc (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
            (enc
              (hash (cat cr-1 (exp (gen) x-1))
                (cat sr-1 (exp (gen) y-1)) s spk-1
                (enc (hash s spk-1) (privk ca-1))) (invk spk-1))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-1 x-1)) "s hs traffic" cr-1
                  sr-1)) (cat cr-1 (exp (gen) x-1))
              (cat sr-1 (exp (gen) y-1))
              (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
              (enc
                (hash (cat cr-1 (exp (gen) x-1))
                  (cat sr-1 (exp (gen) y-1)) s spk-1
                  (enc (hash s spk-1) (privk ca-1))) (invk spk-1)))
            (hash (exp (gen) (mul y-1 x-1)) "s hs traffic" cr-1 sr-1))))
      (recv
        (enc
          (hash
            (hash "finished"
              (hash (exp (gen) (mul y-1 x-1)) "c hs traffic" cr-1 sr-1))
            (cat cr-1 (exp (gen) x-1)) (cat sr-1 (exp (gen) y-1))
            (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
            (enc
              (hash (cat cr-1 (exp (gen) x-1))
                (cat sr-1 (exp (gen) y-1)) s spk-1
                (enc (hash s spk-1) (privk ca-1))) (invk spk-1))
            (hash
              (hash "finished"
                (hash (exp (gen) (mul y-1 x-1)) "s hs traffic" cr-1
                  sr-1)) (cat cr-1 (exp (gen) x-1))
              (cat sr-1 (exp (gen) y-1))
              (cat s spk-1 (enc (hash s spk-1) (privk ca-1)))
              (enc
                (hash (cat cr-1 (exp (gen) x-1))
                  (cat sr-1 (exp (gen) y-1)) s spk-1
                  (enc (hash s spk-1) (privk ca-1))) (invk spk-1))))
          (hash (exp (gen) (mul y-1 x-1)) "c hs traffic" cr-1 sr-1)))
      (recv
        (enc "login" u-0 p-0
          (hash "c ap traffic" cr-1 sr-1
            (hash (exp (gen) (mul y-1 x-1)) "derived"))))
      (send
        (enc "login-successful" cookie
          (hash "s ap traffic" cr-1 sr-1
            (hash (exp (gen) (mul y-1 x-1)) "derived"))))
      (load authstor (cat pt-2 any-0))
      (stor authstor (cat pt-1 "server store" s u-0 cookie))))
  (label 634)
  (parent 596)
  (realized)
  (shape)
  (satisfies
    (no (p "servera" "u" z0 u) (z 0) (cookie cookie) (u u) (s s)
      (ca ca-0) (cr cr) (sr sr) (spk spk-0) (x x-0)))
  (maps
    ((0)
      ((cookie cookie) (u u) (s s) (ca ca-0) (cr cr) (sr sr) (spk spk-0)
        (x x-0) (y y-0) (cookiestor cookiestor) (request request)
        (response response))))
  (origs (cookie (3 4)) (pt-1 (3 6)) (pt (1 6)) (sr (2 1)) (cr (0 0))))

(comment "Nothing left to do")

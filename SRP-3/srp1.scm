(herald
 "SRP protocol"
 (algebra diffie-hellman)
 (bound 40)
 (limit 8000)
 )

(defprotocol srp diffie-hellman
  (defrole client-init ; Client establishs password based authenticator with server
    (vars (s text) (x rndx) (client server name)) 
    (trace
     (init (cat "Client state" s x client server)) ; Client stores x = Hash(salt, Password)
     ; CPSA cannot use hashed values as exponents, so we are representing the hash of the salt and 
     ; password as a random exponent, x, generated by the client, which is consistent with the protocol
     ; use of x = hash(salt, Password) as an exponent in the verifier v = g^x and in the generation of
     ; the key material
     (send (enc "Enroll" s (exp (gen) x) client (ltk client server)))) ; Authenticator to server
    (uniq-gen s x))

  (defrole server-init ; Server stores authenticator and salt for client
    (vars (s text) (v mesg) (client server name))
    (trace
     (recv (enc "Enroll" s v client (ltk client server))) ; Received authenticator g^x and salt
     (init (cat "Server record" s v client server)))) ; Server stores values in authentication database

  (defrole client
    (vars (client server name) (a rndx) (b u x expt) (s text))     
    (trace
     (send client) ; Client sends name
     (recv s) ; Client receives salt
     (obsv (cat "Client state" s x client server)) ; Client obtains x = Hash(salt, Password)
     (send (exp (gen) a)) ; Client sends A = g^a, a is generated freshly by client
     (recv (cat (enc (exp (gen) b) (exp (gen) x)) u)) ; Client receives B = g^b encrypted by v, u
     ; Client sends H(A, B, K) = M1
     (send (hash (exp (gen) a) ; A
		 (enc (exp (gen) b) (exp (gen) x)) u ; B
		 (hash (exp (gen) (mul b a)) (exp (gen) (mul b u x))))) ; K = (B^a)((B^u)^x)
     ; Client receives H(A, M1, K) = M2
     (recv (hash (exp (gen) a) ; A
		 (hash (exp (gen) a) ; M1 begins
		       (enc (exp (gen) b) (exp (gen) x)) u
		       (hash (exp (gen) (mul b a)) (exp (gen) (mul b u x)))) ; M1 ends
		 (hash (exp (gen) (mul b a)) (exp (gen) (mul b u x)))))) ; K
    (uniq-gen a))

  (defrole server
    (vars (client server name) (a expt) (b u rndx) (s text) (v base))
    (trace
     (recv client) ; Server receives Client's name
     (obsv (cat "Server record" s v client server)) ; Server retreives Client's verifier and salt
     (send s) ; Server sends Client's salt
     (recv (exp (gen) a)) ; Server recieves A = g^a
     (send (cat (enc (exp (gen) b) v) u)) ; Server sends B = g^b encrypted by v, u (b and u freshly generated)
     ; Server receives H(A, B, K) = M1
     (recv (hash (exp (gen) a) ; A
		 (enc (exp (gen) b) v) u ; B
		 (hash (exp (gen) (mul a b)) (exp v (mul u b))))) ; K
     ;Server sends H(A, M1, K) = M2
     (send (hash (exp (gen) a) ; A
		 (hash (exp (gen) a) ; M1 begins with A
		       (enc (exp (gen) b) v) u ; B
		       (hash (exp (gen) (mul a b)) (exp v (mul u b)))) ; M1 ends with K
		 (hash (exp (gen) (mul a b)) (exp v (mul u b)))))) ; K = (A^b)((v^u)^b)
    (uniq-gen u b))

  (defrule at-most-one-server-init-per-client ; Rule to allow only one client server registration
    (forall ((z0 z1 strd) (client server name))
            (implies
	     (and (p "server-init" z0 1)
		  (p "server-init" z1 1)
		  (p "server-init" "client" z0 client)
		  (p "server-init" "client" z1 client)
		  (p "server-init" "server" z0 server)
		  (p "server-init" "server" z1 server))
	     (= z0 z1))))
  
  (comment "This protocol is a rewritten version of the SRP model originally produced by Moses Liskov") 
  (comment "to explicitly make use of the Diffie-Hellman components in all areas of the protocol. This") 
  (comment "was done to allow an analysis of the leaking of the verifier. Under Moses's model, if the") 
  (comment "verifier is leaked, a shape indicating an attack can be found because the second term, g^(bux),") 
  (comment "is represented as a (hash (hash s p)). This form is released and doesn't explore whether or not") 
  (comment "the second term could be found by the adversary."))

(defskeleton srp ; Analysis of client run
  (vars (client server name))
  (defstrand client 7 (server server) (client client))
  (non-orig (ltk client server)))

(defskeleton srp ; Analysis of server run
  (vars (client server name))
  (defstrand server 6 (server server) (client client))
  (non-orig (ltk client server)))

   
